digraph cfg {
	node [shape=record];
	0 -> 1;
	0 [label="{id: 0|
	frame.node.setIndex(frame.g.time);\n
	frame.node.setLowLink(frame.g.time);\n
	frame.g.time += 1;\nframe.g.stack.push(frame.node);\n
	frame.node.setInStack(true);\n
	frame.iterator = frame.g.getNeighbours(frame.node).iterator();\n
	frame.block = 1;\n
	break;}" color=red];
	1 [label="{id: 1|
	if (frame.iterator.hasNext()) \{\n
	    frame.n = frame.iterator.next();\n
	    if (!frame.n.wasVisited()) \{\n
	        stack.push(new DfsCTCFrame(frame.g,frame.n));\n
	        frame.block = 7;\n
	        break;\n
	    \} else \{\n
	        if (frame.n.isInStack()) \{\n
	            frame.node.setLowLink(Math.min(frame.node.getLowLink(), frame.n.getIndex()));\n
	        \}\n
	        frame.block = 1;\n
            break;\n
	    \}
	\} else \{
	    if (frame.node.getLowLink() == frame.node.getIndex()) \{\n
	        final List\<Node\> ctc = new ArrayList\<\>();\n
	        Node n;\n
	        do \{\n
	            n = frame.g.stack.pop();\n
	            n.setInStack(false);\n
	            ctc.add(n);\n
	        \}
	        while (!n.equals(frame.node));\n
	        frame.g.ctc.add(ctc);\n
	     \}\n
	     return;\n
	\}}" color=red];
	1 -> 7;
	1 -> 1;
	7 -> 1;
	7 [label="{id: 7|
	frame.node.setLowLink(Math.min(frame.node.getLowLink(), frame.n.getLowLink()));\n
	frame.block = 1;\n
	break;}" color=red];
}
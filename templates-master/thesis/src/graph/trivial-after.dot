digraph cfg {
	node [shape=record];
	0 -> 1;
	0 [label="{id: 0|frame.node.setIndex(frame.g.time);\nframe.node.setLowLink(frame.g.time);\nframe.g.time += 1;\nframe.g.stack.push(frame.node);\nframe.node.setInStack(true);\nframe.iterator = frame.g.getNeighbours(frame.node).iterator();|jump 1;}" color=red];
	1:true -> 2;
	1:false -> 3;
	1 [label="{id: 1||frame.iterator.hasNext()|{<true>true|<false>false}}" color=red];
	2:true -> 4;
	2:false -> 5;
	2 [label="{id: 2|frame.n = frame.iterator.next();|!frame.n.wasVisited()|{<true>true|<false>false}}" ];
	3 [label="{id: 3|if (frame.node.getLowLink() == frame.node.getIndex()) \{\n            final List\<Node\> ctc = new ArrayList\<\>();\n            Node n;\n            do \{\n                n = frame.g.stack.pop();\n                n.setInStack(false);\n                ctc.add(n);\n            \} while (!n.equals(frame.node));\n            frame.g.ctc.add(ctc);\n        \}|return;}" ];
	4 -> 7;
	4 [label="{id: 4|stack.push(new DfsCTCFrame(frame.g,frame.n));|jump 7;}" ];
	5 -> 1;
	5 [label="{id: 5|if (frame.n.isInStack()) \{\n                    frame.node.setLowLink(Math.min(frame.node.getLowLink(), frame.n.getIndex()));\n                \}|jump 1;}" ];
	7 -> 1;
	7 [label="{id: 7|frame.node.setLowLink(Math.min(frame.node.getLowLink(), frame.n.getLowLink()));|jump 1;}" color=red];
}